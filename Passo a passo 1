Para rodar seus testes end-to-end do Maestro Studio em um servidor, sem interface gráfica, usando um emulador Android no Docker e um script shell, você seguirá um processo em várias etapas que envolve a configuração do ambiente Docker com um emulador Android, a adaptação do seu script shell para trabalhar nesse ambiente e a execução dos testes. Aqui está um guia passo a passo detalhado para configurar tudo desde o início:

### 1. Configurando o Docker com um Emulador Android

1. **Criar uma imagem Docker com o Emulador Android:**
   - Você precisará de uma imagem Docker que inclua o Android SDK e o emulador. Uma opção é usar imagens prontas disponíveis no Docker Hub ou criar a sua própria.
   - Se optar por criar a sua própria, o Dockerfile deve instalar o Android SDK, as ferramentas de linha de comando e criar um AVD (Android Virtual Device).

2. **Dockerfile Exemplo:**
   ```Dockerfile
   FROM ubuntu:20.04
   
   # Instala as dependências necessárias
   RUN apt-get update && apt-get install -y curl unzip libqt5widgets5
   
   # Baixa e instala o Android SDK
   RUN mkdir /opt/android-sdk && cd /opt/android-sdk && \
       curl -o sdk-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-6609375_latest.zip && \
       unzip sdk-tools.zip && rm sdk-tools.zip
   
   ENV ANDROID_HOME=/opt/android-sdk
   ENV PATH=$PATH:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools
   
   # Aceita as licenças e instala as plataformas e ferramentas necessárias
   RUN yes | sdkmanager --licenses && \
       sdkmanager "platform-tools" "platforms;android-29" "emulator" "system-images;android-29;google_apis;x86_64"
   
   # Cria um AVD
   RUN echo "no" | avdmanager create avd -n test -k "system-images;android-29;google_apis;x86_64"
   
   # Copia um script de inicialização customizado (explicado mais adiante)
   COPY start-emulator.sh /opt/android-sdk/
   
   # Expõe a porta do ADB
   EXPOSE 5555
   
   CMD ["/opt/android-sdk/start-emulator.sh"]
   ```
   - Este Dockerfile instala o necessário para rodar um emulador Android. Você precisará ajustá-lo conforme necessário, por exemplo, mudando as versões do Android SDK ou as imagens do sistema.

3. **Script de Inicialização do Emulador (`start-emulator.sh`):**
   - Este script inicia o emulador sem interface gráfica e configura o ADB para conectar-se ao emulador de fora do container.
   ```bash
   #!/bin/bash
   
   emulator -avd test -no-audio -no-window -no-snapshot &
   emulator_pid=$!
   
   # Espera o emulador iniciar completamente
   adb wait-for-device
   
   echo "Emulador iniciado."
   
   # Mantém o script em execução para manter o container ativo
   wait $emulator_pid
   ```
   - Certifique-se de tornar esse script executável antes de copiá-lo para a imagem Docker (`chmod +x start-emulator.sh`).

### 2. Adaptação do Seu Script Shell para Execução no Servidor

Você já tem um script shell (`shellscript.sh`) que prepara e executa os testes usando o Maestro Studio. Para utilizá-lo em um ambiente sem GUI e dentro do Docker, faça as seguintes adaptações:

1. **Configuração do ADB para Conectar ao Emulador Dockerizado:**
   - Seu script deve configurar o ADB para se conectar ao emulador que está rodando dentro do Docker. Isso pode ser feito com `adb connect <endereço_do_container>:5555`, onde `<endereço_do_container>` é o endereço IP do container Docker executando o emulador.

2. **Execução do Maestro Studio e dos Testes:**
   - Certifique-se de que o Maestro Studio está acessível dentro do seu ambiente Docker, o que pode exigir a instalação do Maestro Studio ou disponibilizá-lo de forma que o Docker possa acessá-lo.
   - Adapte as chamadas ao Maestro Studio no seu script para garantir que elas funcionem dentro do ambiente Dockerizado.

### 3. Construção e Execução do Docker

1

. **Construa a imagem Docker:**
   ```bash
   docker build -t android-emulator .
   ```

2. **Execute o container Docker:**
   ```bash
   docker run -d --name android-test -p 5555:5555 android-emulator
   ```
   - Isso iniciará o emulador Android dentro do container.

3. **Conecte o ADB ao Emulador no Container:**
   ```bash
   adb connect host.docker.internal:5555
   ```
   - Isso permite que o ADB no host se conecte ao emulador dentro do container.

### 4. Rodando o Teste

- Agora, você pode executar o seu script shell modificado (`shellscript.sh`) para rodar os testes. Lembre-se de ajustar as partes que interagem com o emulador para garantir que elas funcionem corretamente no novo ambiente.

Este é um guia detalhado que deve ser ajustado conforme as necessidades específicas do seu ambiente e configuração. Certifique-se de testar cada etapa cuidadosamente para garantir que tudo funcione conforme esperado.
