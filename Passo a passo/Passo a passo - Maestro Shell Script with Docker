Para remover todos os contêineres Docker do seu sistema sem excluir o Docker em si, você pode seguir os seguintes passos. Esses comandos vão parar todos os contêineres ativos e depois removê-los, limpar todos os contêineres inativos, redes não utilizadas, volumes não utilizados, e imagens não utilizadas.

1. Parar todos os contêineres ativos: 
docker stop $(docker ps -aq)

2. Remover todos os contêineres: 
docker rm $(docker ps -aq)

Após parar todos os contêineres, este comando os remove. Usando docker ps -aq novamente, ele lista todos os contêineres (ativos ou não), e docker rm os remove.

Se você também deseja limpar imagens não utilizadas, redes não utilizadas e volumes (o que pode ser considerado parte da "limpeza" dos contêineres, já que podem existir dependências), você pode executar os comandos adicionais abaixo.

1. Remover todas as imagens não utilizadas: 
docker rmi $(docker images -q)

2. Remover volumes não utilizados: 
docker volume prune

3. Remover redes não utilizadas: 
docker network prune

Para garantir que todos os contêineres, tanto ativos quanto inativos, tenham sido removidos corretamente, você pode usar os comandos a seguir:

1. Listar todos os contêineres (ativos e inativos): docker ps -a

2. Listar todas as imagens Docker: docker images

3. Listar todos os volumes Docker: docker volume ls

4. Listar todas as redes Docker: docker network ls

Este comando mostrará todas as redes Docker. Após a poda, apenas as redes padrão do Docker (bridge, host, none) devem permanecer, a menos que existam redes personalizadas em uso.

----------------------------------------------------------------

Excluir o diretorio: rm -r /home/androidusr/maestroShellScript

Passo a passo de como começar:

1. Instalar o Docker Container com o Android Studio e com porta para o Maestro Studio:

docker run -d -p 6080:6080 -p 9999:9999 -e EMULATOR_DEVICE="Samsung Galaxy S10" -e WEB_VNC=true --device /dev/kvm --name android-container budtmo/docker-android:emulator_11.0


2. Entrar no Docker Container:

caso nao esteja iniciado: docker start android-container

docker exec -it android-container /bin/bash

3. Instalar o Maestro Studio dentro do Container Docker:

curl -Ls "https://get.maestro.mobile.dev" | bash

export PATH="$PATH":"$HOME/.maestro/bin"

maestro studio

----------------------------------------------------------------

Para instalar novas apks no Container Docker:

1. Entrar em cd Downloads/

2. Copie a APK do host para o contêiner (se ainda não o fez):

docker cp testIDVouTeHomologar.apk android-container:/home/androidusr/
ou
docker cp beetmobilidade-pro-4.0.19.apk android-container:/home/androidusr/

3. Entrar dentro do container:

docker exec -it android-container bash

4. Instalar com o adb: 

adb install testIDVouTeHomologar.apk
ou
adb install beetmobilidade-pro-4.0.19.apk

----------------------------------------------------------------

Para copiar a pasta maestroShellScript do seu diretório de Downloads no Ubuntu para dentro do seu container Docker onde o usuário é androidusr, você deve seguir os seguintes passos:

1. Abra um Terminal no seu sistema Ubuntu.

2. Navegue até o diretório onde a pasta maestroShellScript está localizada. Se ela estiver no seu diretório de Downloads, o comando seria algo como:

cd ~/Downloads

Certifique-se de estar no diretório correto onde a pasta maestroShellScript está localizada antes de prosseguir.

3. Use o comando docker cp para copiar a pasta inteira para o container. O comando docker cp permite copiar arquivos ou pastas do host para o container e vice-versa. A sintaxe para copiar a pasta para o container é a seguinte:

docker cp maestroShellScript/ android-container:/home/androidusr/

Este comando copia a pasta maestroShellScript para o diretório home do usuário androidusr dentro do container chamado android-container. Certifique-se de substituir android-container pelo nome correto do seu container Docker, se for diferente.

Verifique se a cópia foi bem-sucedida. Após copiar, você pode querer verificar se os arquivos estão presentes no container. Para fazer isso, acesse o container com o comando:

docker exec -it android-container /bin/bash

E então, navegue até o diretório onde você copiou os arquivos para confirmar que eles estão lá:

cd /home/androidusr/maestroShellScript
ls

Você deverá ver os arquivos run_test.sh e template_test.yaml listados.

Agora que você copiou os arquivos necessários para dentro do seu container, você pode prosseguir com a execução do seu script run_test.sh seguindo os passos anteriormente mencionados. Lembre-se de dar permissão de execução ao seu script com chmod +x run_test.sh se ainda não o fez.

----------------------------------------------------------------

Ótimo, agora que você confirmou a presença dos arquivos run_test.sh e template_test.yaml no diretório correto dentro do seu container Docker, você está pronto para executar o seu script de teste. Aqui estão os próximos passos:

1. Torne o Script Executável:
Primeiro, certifique-se de que o script run_test.sh tem permissão de execução. No diretório ~/maestroShellScript, execute:

chmod +x run_test.sh

Execute o Script:
Agora, você pode executar o script com o seguinte comando:

./run_test.sh "hml704appsPro"
ou
./run_test.sh "Beet MobilidadePro"


Este comando iniciará a execução do seu teste definido no arquivo template_test.yaml usando o Maestro Studio.

Monitore a Execução do Teste:
Observe a saída no terminal enquanto o teste está sendo executado. Qualquer mensagem de erro ou sucesso será mostrada aqui, permitindo que você acompanhe o progresso do teste.

Depuração:
Se você encontrar algum erro durante a execução do teste, você precisará investigar as mensagens de erro para entender o que deu errado. Isso pode envolver revisar o script run_test.sh, o arquivo de teste template_test.yaml, ou a configuração do seu ambiente de teste no Docker.

Ajustes Necessários:
Dependendo dos resultados dos seus testes, você pode precisar fazer ajustes no seu script de teste, no arquivo YAML, ou na configuração do seu ambiente para corrigir erros ou melhorar a cobertura do teste.

Lembre-se, a automação de testes pode exigir iterações para refinar os testes e garantir que eles sejam robustos e confiáveis. Se precisar de mais assistência com o Maestro Studio ou com a configuração do seu ambiente de testes, não hesite em consultar a documentação oficial do Maestro ou buscar apoio da comunidade.


